@page "/debrid"
@inject DebridService _debridService
@inject IJSRuntime _js

@if (_login != null)
{
	<div class="w-100 text-center">
		<a class="btn btn-primary"
		   href="@_login"
		   target="_blank">
			Login
		</a>
	</div>
}
else
{
	<div class="d-flex w-100 justify-content-end align-items-center mb-1">
		@if (_busy)
		{
			<div class="spinner-border mx-3"></div>
		}
		<button class="btn btn-primary"
				@onclick="@(() => OnReloadAsync())"
				disabled="@_busy">
			Reload
		</button>
	</div>
}

@if (_items != null)
{
	<table class="table">
		@foreach (var item in _items)
		{
			<tbody class="text-nowrap">
				<tr class="@GetRowClass(item.StatusType)">
					<td class="font-weight-bold w-100">
						@item.Name
					</td>
					<td class="text-right px-3">
						@(Utils.BytesToString(item.SizeTotal))
					</td>
					<td class="text-right">
						@(Utils.BytesToString(item.SizeCurrent))
					</td>
					<td class="text-right">
						@((item.SizeTotal > 0 ? (item.SizeCurrent / (decimal)item.SizeTotal * 100) : 0).ToString("F2"))%
					</td>
					<td class="text-center">
						@item.Status
					</td>
					<td class="py-0 align-middle">
						<button class="btn btn-primary @(item.Files?.Any() == true ? "visible" : "invisible")"
								@onclick="@(() => OnDownloadAsync(item))"
								disabled="@_busy">
							<i class="fas fa-copy fa-fw fa-lg"></i>
						</button>
						<button class="btn btn-secondary"
								@onclick="@(() => DeleteAsync(item))"
								disabled="@_busy">
							<i class="fas fa-times fa-fw fa-lg"></i>
						</button>
					</td>
				</tr>
			</tbody>
			@if (item.Files?.Any() == true)
			{
				<tbody class="table-sm table-borderless text-nowrap">
					@foreach (var file in item.Files)
					{
						<tr>
							<td class="px-5">
								<a class="text-white text-muted" href="@file.Link">@file.Name</a>
							</td>
							<td class="text-right px-3">
								@(Utils.BytesToString(file.Size))
							</td>
							<td colspan="4"></td>
						</tr>
					}
				</tbody>
			}
		}
	</table>
}

@code {
	public const string TabName = nameof(Debrid);
	public const string TabUrl = "debrid";

	private string _login;
	private IEnumerable<DebridModel> _items;
	private bool _busy;

	protected override async Task OnInitializedAsync()
	{
		_busy = true;
		_login = await _debridService.LoginAsync();
		if (_login == null)
		{
			_items = await _debridService.GetItemsAsync();
		}
		_busy = false;
	}

	private async Task OnReloadAsync()
	{
		_busy = true;
		_items = await _debridService.GetItemsAsync(true);
		_busy = false;
	}

	private async Task OnDownloadAsync(DebridModel item)
	{
		_busy = true;
		var files = item.Files.Where(x => x.Size > 5 * 1000 * 1000).Select(x => x.Link);
		await _js.InvokeVoidAsync("navigator.clipboard.writeText", string.Join('\n', files));
		await Task.Delay(250);
		_busy = false;
	}

	private async Task DeleteAsync(DebridModel item)
	{
		_busy = true;
		await _debridService.DeleteAsync(item);
		_items = await _debridService.GetItemsAsync(true);
		_busy = false;
	}

	private string GetRowClass(DebridStatus status)
	{
		return status switch
		{
			DebridStatus.Finished => "bg-success",
			DebridStatus.Error => "bg-danger",
			_ => null
		};
	}
}