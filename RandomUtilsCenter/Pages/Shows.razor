@page "/shows"
@inject ShowsService _showsService

@if (_login != null)
{
	<div class="w-100 text-center">
		<a class="btn btn-primary"
		   href="@_login">
			Login
		</a>
	</div>
}
else
{
	<div class="d-flex w-100 justify-content-end align-items-center mb-1">
		<div class="spinner-border mx-3 @(_busy ? "visible" : "invisible")"></div>
		<button class="btn btn-primary"
				@onclick="OnReloadAsync"
				disabled="@_busy">
			Reload
		</button>
	</div>
}

@if (_shows != null)
{
	<table class="table">
		@foreach (var show in _shows)
		{
			<tr class="text-nowrap @GetRowClass(show.Date)">
				<td class="font-weight-bold w-100">
					@show.ShowTitle
				</td>
				<td class="text-right w-100">
					@show.EpisodeTitle
				</td>
				<td class="text-center">
					@show.SeasonEpisode
				</td>
				<td class="text-center">
					@show.Date.ToString("yyyy-MM-dd")
				</td>
				<td class="py-0 align-middle">
					<button class="btn btn-primary @(show.IsWatchable ? "visible" : "invisible")"
							@onclick="@(() => OnWatchAsync(show))"
							disabled="@_busy">
						<i class="fas fa-check fa-fw fa-lg"></i>
					</button>
					<a class="btn btn-secondary"
					   href="https://rarbgtorrents.org/torrents.php?search=@show.ShowTitle+@show.SeasonEpisode+1080p"
					   target="_blank">
						<i class="fas fa-search fa-fw fa-lg"></i>
					</a>
					<a class="btn btn-secondary"
					   href="https://www.addic7ed.com/srch.php?search=@show.ShowTitle+@show.SeasonEpisode"
					   target="_blank">
						<i class="fas fa-closed-captioning fa-fw fa-lg"></i>
					</a>
				</td>
			</tr>
		}
	</table>
}

@code {
	private string _login;
	private IEnumerable<ShowModel> _shows;
	private bool _busy;

	protected override async Task OnInitializedAsync()
	{
		_busy = true;
		_login = _showsService.Login();
		if (_login == null)
		{
			_shows = await _showsService.GetShowsAsync();
		}
		_busy = false;
	}

	private async Task OnReloadAsync()
	{
		_busy = true;
		_shows = await _showsService.GetShowsAsync(true);
		_busy = false;
	}

	private async Task OnWatchAsync(ShowModel show)
	{
		_busy = true;
		await _showsService.WatchAsync(show);
		_shows = await _showsService.GetShowsAsync(true);
		_busy = false;
	}

	private string GetRowClass(DateTime date)
	{
		var today = DateTime.Today;
		return date.Date switch
		{
			var x when x < today.AddDays(-1) => "bg-danger",
			var x when x < today => "bg-warning",
			var x when x == today => "bg-success",
			_ => null
		};
	}
}