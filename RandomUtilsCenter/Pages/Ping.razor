@page "/ping"
@implements IDisposable
@inject ConfigService _config
@inject PingService _service

<MudToolBar Class="gap-1">
	<MudSpacer />
	<MudNumericField @bind-Value="_config.PingLatency" Label="Latency" Min="0" Max="200" Margin="Margin.Dense" Class="flex-grow-0" />
	<MudNumericField @bind-Value="_config.PingInterval" Label="Interval" Min="0" Max="60" Margin="Margin.Dense" Class="flex-grow-0 mr-5" />
	<MudCheckBox @bind-Checked="_showAll" Label="Show all" />
	<MudButton OnClick="OnSave" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
</MudToolBar>

<MudTable Items="Items" ReadOnly="true" Dense="true" RowClassFunc="GetRowClass" HeaderClass="mud-theme-primary">
	<HeaderContent>
		<MudTh>Timestamp</MudTh>
		<MudTh>Status</MudTh>
		<MudTh>Latency</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd>@context.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</MudTd>
		<MudTd>@context.Status</MudTd>
		<MudTd>@context.RoundtripTime</MudTd>
	</RowTemplate>
</MudTable>

@code
{
	private bool _showAll = true;

	protected override void OnInitialized()
	{
		_service.Updated += OnUpdated;
	}

	public void Dispose()
	{
		_service.Updated -= OnUpdated;
	}

	private void OnSave()
	{
		_config.Save();
	}

	private void OnUpdated()
	{
		_ = InvokeAsync(StateHasChanged);
	}

	private IEnumerable<PingItem> Items => _service.Items.Where(x => _showAll || x.Status != System.Net.NetworkInformation.IPStatus.Success || x.RoundtripTime >= 100);

	private string GetRowClass(PingItem item, int index)
	{
		if (item.Status != System.Net.NetworkInformation.IPStatus.Success)
		{
			return "mud-theme-error";
		}
		if (item.RoundtripTime >= 100)
		{
			return "mud-theme-warning";
		}
		return "mud-theme-success";
	}
}